from flask import Flask, request, render_template, send_file
import PyPDF2
import re
import os
import pandas as pd
from io import BytesIO

app = Flask(__name__)

def extract_data_from_text(text):
    # Address field: handles "2Address" and "2Address/GSTIN"
    address_match = re.search(r'2Address(?:/GSTIN)?\s+(.*)', text)
    address_value = address_match.group(1).strip() if address_match else ''

    # Realised Value: check both patterns
    realised_value_match = re.search(r'Realised Value in Foreign\s*Currency\s*([0-9,]+\.\d+)', text)
    if not realised_value_match:
        realised_value_match = re.search(r'Total Realised Value\s*([0-9,]+\.\d{2})', text)
    realised_value = realised_value_match.group(1).strip() if realised_value_match else ''

    # Currency: handle both "Realisation" and "Realization"
    currency_match = re.search(r'\d+\s*Currency of Reali(?:sation|zation)\s+([A-Z]+)', text)
    currency_value = currency_match.group(1).strip() if currency_match else ''

    # Updated regex to handle "Date and Time of Printing" more robustly
    date_time_match = re.search(r'Date and Time of Printing\s+(\d{2}-\d{2}-\d{4}\s+\d{2}:\d{2}:\d{2}\s+[APM]{2})', text)
    date_time_value = date_time_match.group(1).strip() if date_time_match else ''

    data = {
        "Firm Name": re.search(r'1Firm Name\s+(.*)', text),
        "Address": address_value,
        "IEC": re.search(r'3IEC\s+([0-9]+)', text),
        "Shipping Bill / Invoice No.": re.search(r'4Shipping Bill / Invoice No.\s+(.*)', text),
        "Shipping Bill / Invoice Date": re.search(r'5Shipping Bill / Invoice Date\s+(.*)', text),
        "Shipping Bill Port": re.search(r'6Shipping Bill Port\s+(.*)', text),
        "Bank Name": re.search(r'7Bank Name\s+(.*)', text),
        "Bill ID No.": re.search(r'8Bill ID No.\s+(.*)', text),
        "Bank Realisation Certificate No.": re.search(r'Bank Realisation Certificate\s+No\.\s*([A-Z0-9]+)', text),
        "BRC Date": re.search(r'Dated\s+(\d{2}-\d{2}-\d{4})', text),
        "Date of Realisation": re.search(r'10Date of Realisation.*?Bank\s*(\d{2}-\d{2}-\d{4})', text, re.DOTALL),
        "Realised Value": realised_value,
        "Currency": currency_value,
        "Print Date & Time": date_time_value,
        "eBRC Generated By": re.search(r'15eBRC\s+Generated\s+by(.*)', text, re.DOTALL),
    }

    # Clean the values (if regex match is None, use an empty string)
    return {
        key: (
            match.group(1).strip() if match else ''
        ) if isinstance(match, re.Match) else match
        for key, match in data.items()
    }

def extract_from_pdf(file):
    # Process the uploaded PDF file
    reader = PyPDF2.PdfReader(file)  # Pass the file object directly
    text = ''
    for page in reader.pages:
        page_text = page.extract_text()
        if page_text:
            text += page_text + '\n'
    return extract_data_from_text(text)

def generate_excel(data):
    # Convert data to DataFrame and create an Excel file in-memory
    df = pd.DataFrame(data)
    excel_file = BytesIO()
    with pd.ExcelWriter(excel_file, engine="xlsxwriter") as writer:
        df.to_excel(writer, index=False)
    excel_file.seek(0)
    return excel_file

@app.route("/", methods=["GET", "POST"])
def index():
    if request.method == "POST":
        # Get the uploaded PDF files
        files = request.files.getlist('file')
        
        all_data = []
        for file in files:
            # Extract data from each PDF file
            structured_data = extract_from_pdf(file)
            all_data.append(structured_data)
        
        # Generate Excel file with extracted data
        excel_file = generate_excel(all_data)

        # Send the generated Excel file as a download
        return send_file(excel_file, as_attachment=True, download_name="extracted_data.xlsx", mimetype="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
    
    return render_template("index.html", data=None)

if __name__ == "__main__":
    port = int(os.environ.get("PORT", 5000))
    app.run(debug=False, host="0.0.0.0", port=port)

